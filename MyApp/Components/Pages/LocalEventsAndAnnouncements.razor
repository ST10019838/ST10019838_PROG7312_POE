@page "/local-events-and-announcements"
@using MyApp.Components.Forms
@using MyApp.Components.UI
@using MyApp.Models
@using System.Collections.Immutable
@implements IDisposable
@inject StateContainer StateContainer
@using TailwindMerge
@inject TwMerge Tw
@using System.Diagnostics


<section class="grow overflow-auto px-5 pb-7 sm:h-full sm:max-h-screen flex flex-col gap-5">
    <div class="lg:sticky top-0 flex items-center justify-center lg:justify-between w-full gap-3 flex-col lg:flex-row bg-white pt-5 pb-3">
        <!--Tab Selection-->
        <div class="flex items-center w-full gap-2 justify-center lg:justify-start">
            <button @onclick=ShowRecentActivity class=@Tw.Merge(areRecommendationsShown ? UnselectedTabClass : SelectedTabClass)>Recent Activity</button>
            <div class="w-0.5 h-7 bg-gray-300 rounded-full" />
            <button @onclick=ShowRecommendations class=@Tw.Merge(areRecommendationsShown ? SelectedTabClass : UnselectedTabClass)>Recommendations</button>
        </div>
        
        <!--Search-->
        <div>
            <Search OnSearch="@SearchEventsAndAnnouncements" OnClear="@ClearSearchFilters" />
        </div>
    </div>

    @if (areRecommendationsShown)
    {
        @if (!StateContainer.HaveCategoriesBeenSearched())
        {
            <div class="grid w-full place-content-center">
                Not enough search data has been collected to recommend events or announcements.
                Please search some categories.
            </div>
        }
        else
        {
            <div class="flex flex-col gap-20">
                @foreach (var item in RecommendedEventsAndAnnouncements)
                {
                    <div class="flex flex-col gap-5">
                        <DateSeparator Date="@item.Key" />

                        <div class="flex flex-wrap w-full gap-6 flex-col lg:flex-row justify-center">
                            @foreach (var eventOrAnnouncement in item.Value)
                            {
                                <EventOrAnnouncementCard EventOrAnnouncement="@eventOrAnnouncement" />
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }
    else
    {
        @if (StateContainer.EventsAndAnnouncementsAreEmpty())
        {
            <div class="grid w-full place-content-center">No events or announcements have been posted yet.</div>

            <button @onclick=AddTestData>Click me to add some test data in the mean time.</button>
        }
        else if ((EventsAndAnnouncements is null) || !EventsAndAnnouncements.Any())
        {
            <div class="grid w-full place-content-center">No events or announcemens have been found.</div>
        }
        else
        {
            <div class="flex flex-col gap-20">
                @foreach (var item in EventsAndAnnouncements)
                {
                    <div class="flex flex-col gap-5">
                        <DateSeparator Date="@item.Key" />

                        <div class="flex flex-wrap w-full gap-6 flex-col lg:flex-row justify-center">
                            @foreach (var eventOrAnnouncement in item.Value)
                            {
                                <EventOrAnnouncementCard EventOrAnnouncement="@eventOrAnnouncement" />
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }

</section>



@code {
    IEnumerable<KeyValuePair<DateOnly, List<EventOrAnnouncement>>> EventsAndAnnouncements { get; set; }
    IEnumerable<KeyValuePair<DateOnly, List<EventOrAnnouncement>>> RecommendedEventsAndAnnouncements { get; set; }

    string SelectedTabClass = "text-md text-blue-500";
    string UnselectedTabClass = "text-sm text-black/75";
    bool areRecommendationsShown { get; set; } = false;
    bool showSearchFilters = false;

    void ShowRecentActivity()
    {
        areRecommendationsShown = false;
    }

    void ShowRecommendations()
    {
        areRecommendationsShown = true;

        RecommendedEventsAndAnnouncements = StateContainer.GetRecommendedEventsAndAnnouncements();
    }


    void SearchEventsAndAnnouncements(DateOnly? dateSelected, EventCategory? categorySelected)
    {
        EventsAndAnnouncements = StateContainer.GetEventsAndAnnouncements(dateSelected, categorySelected);

        if (areRecommendationsShown) ShowRecentActivity();

        StateHasChanged();
    }

    void ClearSearchFilters()
    {
        EventsAndAnnouncements = StateContainer.GetEventsAndAnnouncements();

        StateHasChanged();
    }



    void AddTestData()
    {
        StateContainer.AddDummyData();

        StateHasChanged();

        EventsAndAnnouncements = StateContainer.GetEventsAndAnnouncements();
    }

    protected override void OnInitialized()
    {
        // add to the NavigationManager event
        // Issues = Repository.GetIssues();

        StateContainer.OnChange += StateHasChanged;

        EventsAndAnnouncements = StateContainer.GetEventsAndAnnouncements();
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    private void RefreshIssues()
    {
        StateContainer.Issues = Repository.GetIssues();
        StateHasChanged();
    }

}