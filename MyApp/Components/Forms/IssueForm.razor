@using MyApp.Models;
@using MyApp.Components.UI
@using System.ComponentModel.DataAnnotations


<EditForm EditContext="@Context" class="flex w-full flex-col justify-center gap-5">
    <DataAnnotationsValidator />

    <TextInput Id="Location" @bind-Value="@Issue.Location"
               FormContext="Context" IsRequired="true"
               Validation="@(() => Validate<string>("Location",Issue.Location))" />


    <Textarea Id="Description" @bind-Value="@Issue.Description"
              FormContext="Context" IsRequired="true"
              Validation="@(() => Validate("Description", Issue.Description))" />


    <Select Id="Places" Values="IssueCategories.Array" @bind-Value="@Issue.Category"
            FormContext="Context" IsRequired="true"
            Validation="@(() => Validate("Category", Issue.Category))" />


    <FileInput Id="Attach Media" @bind-Value="@Issue.MediaAttachments"
               FormContext="Context"
               Validation="@((valid) => Validate("MediaAttachments", Issue.MediaAttachments, isValid: valid, true))" />


    <div class="flex w-full flex-col items-center justify-center gap-2">
        <Button Class="w-full" Disabled="@(Progress <= 2)" 
        IsLoading="@IsSubmitting" LoadingText="Submitting Form..."
        Text="Submit" OnClick="@(() => SubmitForm())" />

        <ProgressBar Progress="@Progress" Class="w-full" />
    </div>
</EditForm>


<!--
    FieldIdentifier Creation was adapted from stackoverflow.com
    Author: dani herrera
    Link: https://stackoverflow.com/questions/72430616/blazor-editcontext-how-to-check-validation-message-for-nested-object
-->
@code {
    private Issue? Issue;

    private EditContext? Context { get; set; }

    Dictionary<string, int> FieldValidity = new Dictionary<string, int>();
    int Progress = 0;

    protected override void OnInitialized()
    {
        Issue = new Issue();
        Context = new EditContext(Issue);

        // The validity of each field is initially set to 0 to indicate
        // that the field is not yet valid. A valid field is represented
        // by 1. The use of numbers to indicate validity will enable
        // total progress on the form to be caluculated by adding
        // all of the valid fields together.
        foreach (var property in typeof(Issue).GetProperties())
        {
            FieldValidity.Add(property.Name, 0);
        }

        Toast idk = new Toast();
    }


    // The following function was adapted from code project.com
    // Author: Juan Francisco Morales Larios
    // Link: https://www.codeproject.com/Articles/1184173/DataAnnotations-in-Depth#CustomValidationAttributes
    private async Task<List<ValidationResult>?> Validate<T>(string name, T value, bool isValid = false, bool validatedExternally = false)
    {
        ValidationContext valContext = new ValidationContext(Issue, null, null)
            {
                MemberName = name
            };

        List<ValidationResult> validationResults = new List<ValidationResult>();

        if (validatedExternally)
        {
            SetFieldValidity(isValid, name);
        }
        else
        {
            isValid = Validator.TryValidateProperty(value, valContext, validationResults);

            SetFieldValidity(isValid, name);
        }

        CalculateProgress();

        // Returns a error message if the field is invalid
        return validationResults.Any() ? validationResults : null;
    }

    private void SetFieldValidity(bool isValid, string name)
    {
        if (isValid)
            FieldValidity[name] = 1;
        else
            FieldValidity[name] = 0;
    }

    // The form's completion progress is calculated by adding the total number of valid fields together.
    // This total is then used to determine how far the progress bar should display.
    private void CalculateProgress()
    {
        int totalValidFields = 0;
        foreach (var item in FieldValidity)
        {
            totalValidFields += item.Value;
        }

        Progress = totalValidFields;
    }

    [Parameter]
    public EventCallback<Issue> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<Issue> OnComplete { get; set; }

    private bool IsSubmitting = false;

    private async Task SubmitForm()
    {
        IsSubmitting = true;

        await OnSubmit.InvokeAsync(Issue);

        IsSubmitting = false;

        await OnComplete.InvokeAsync();
    }
}