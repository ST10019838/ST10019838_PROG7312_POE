@using System.ComponentModel.DataAnnotations
@using TailwindMerge;
@inject TwMerge Tw;


<div>
    <label for="@Id" class="block text-sm font-medium text-gray-900">
        @Id

        @if (IsRequired)
        {
            <span class="text-red-500">*</span>
        }
    </label>


    <!-- 
        The following event binding was adapted from medium.com
        Author: Andrejs Abrickis
        Link: https://medium.com/swlh/blazor-components-communication-pattern-7b14e54cd3f8
    -->
    <select name="@Id"
            id="@Id"
            class=@Tw.Merge("mt-1.5 w-full rounded-lg border-gray-300 text-gray-700 sm:text-sm", IsValid ? "border-gray-200 focus:border-blue-500" : "border-red-500 focus:border-red-500")
            @bind="@Value"
            @bind:event="onchange"
    >
    <!--
        The following option was adapted from stackoverflow.com
        Author: David
        Link: https://stackoverflow.com/questions/5805059/how-do-i-make-a-placeholder-for-a-select-box
    -->
        <option disabled selected >Please select</option>

        @foreach (var item in Values)
        {
            <option value="@item">@item</option>
        }

    </select>

    <div class="mt-1 text-sm text-red-500">@ErrorMessage</div>
</div>


@code {
    // The following 2-way binding was adapted from stackoverflow.com
    // Author: dani herrera
    // Link: https://stackoverflow.com/questions/57932850/how-to-make-two-way-binding-on-blazor-component
    private string _value;


    // The following "async" setter was adapted from medium.com
    // Author: Abhinn Mishra
    // Link: https://medium.com/@mishraabhinn/best-way-to-deal-with-async-call-and-await-in-property-setter-in-c-learn-it-in-easy-way-cdd353502387
    [Parameter]
    public string Value
    {
        get => _value;
        set => SetValue(value);
    }

    bool IsValid { get; set; } = true;
    private string ErrorMessage { get; set; }

    private async Task SetValue(string value)
    {
        if (_value == value) return;
        _value = value;
        await ValueChanged.InvokeAsync(value);

        var result = await Validation();

        if (result is null)
        {
            IsValid = true;
            ErrorMessage = "";
            return;
        }

        IsValid = false;
        ErrorMessage = result[0]?.ErrorMessage;
    }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Func<Task<List<ValidationResult>>> Validation { get; set; }

    [Parameter]
    public EditContext? FormContext { get; set; }

    [EditorRequired]
    [Parameter]
    public string Id { get; set; }


    [Parameter]
    public string Placeholder { get; set; } = "";


    [Parameter]
    public bool IsRequired { get; set; } = false;



    [EditorRequired]
    [Parameter]
    public string[] Values { get; set; }
}
