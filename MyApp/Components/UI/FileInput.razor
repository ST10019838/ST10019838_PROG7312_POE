@using System.ComponentModel.DataAnnotations
@using TailwindMerge;
@using Models;
@inject TwMerge Tw;


<div>
    <label for="@Id" class="block text-sm font-medium text-black">
        @Id

        @if (IsRequired)
        {
            <span class="text-red-500">*</span>
        }
    </label>

    <!--
        The following reset was adapted from github
        Author: georgehemmings (https://github.com/georgehemmings)
        Link: https://github.com/dotnet/aspnetcore/issues/29979
    -->
    <InputFile id="@Id" OnChange="@LoadFiles" accept=".png,.jpg,.jpeg,.pdf" multiple
               class="border-input bg-background mt-1 flex w-full rounded-md border px-3 py-2 text-sm shadow-sm
transition-colors file:border-0 file:bg-transparent file:text-foreground file:text-sm file:font-medium
placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1
focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
               @onclick="ResetValue"/>


    <div class="mt-1 text-sm text-red-500">@ErrorMessage</div>

</div>


@code {
    [EditorRequired]
    [Parameter]
    public string Id { get; set; }


    [Parameter]
    public string Placeholder { get; set; } = "";


    [Parameter]
    public bool IsRequired { get; set; } = false;


    // The following 2-way binding was adapted from stackoverflow.com
    // Author: dani herrera
    // Link: https://stackoverflow.com/questions/57932850/how-to-make-two-way-binding-on-blazor-component
    private IBrowserFile[] _value = new MediaAttachment[MediaAttachment.Settings.MAX_ALLOWEDFILES];


    // The following "async" setter was adapted from medium.com
    // Author: Abhinn Mishra
    // Link: https://medium.com/@mishraabhinn/best-way-to-deal-with-async-call-and-await-in-property-setter-in-c-learn-it-in-easy-way-cdd353502387
    [Parameter]
    public IBrowserFile[] Value
    {
        get => _value;
        set => SetValue(value);
    }


    bool IsValid { get; set; } = false;

    private string ErrorMessage { get; set; }

    private async Task SetValue(IBrowserFile[] value)
    {
        if (_value == value) return;
        _value = value;

        
        await ValueChanged.InvokeAsync(value);

        await Validation.InvokeAsync(IsValid);
    }

    [Parameter]
    public EventCallback<IBrowserFile[]> ValueChanged { get; set; }


    [Parameter]
    public EventCallback<bool> Validation { get; set; }


    [Parameter]
    public EditContext? FormContext { get; set; }


    // The following file funcitons were adapted from youtube.com
    // Author: Claudio Bernasconi
    // Link: https://www.youtube.com/watch?v=a4vUjyf-sjQ
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            var newValue = new IBrowserFile[MediaAttachment.Settings.MAX_ALLOWEDFILES];

            var browserFiles = e.GetMultipleFiles(MediaAttachment.Settings.MAX_ALLOWEDFILES);

            int position = 0;
            foreach (var file in browserFiles)
            {
                if (file == null) continue;

                var fileStream = file.OpenReadStream(MediaAttachment.Settings.MAX_FILESIZE);
                fileStream.Close();

                // MediaAttachment newAttachment = new()
                //     {
                //         Name = Path.GetRandomFileName(),
                //         Size = file.Size,
                //         ContentType = file.ContentType,
                //         LastModified = file.LastModified
                //     };

                // newValue[position++] = newAttachment;
                newValue[position++] = file;

            }

            IsValid = true;

            Value = newValue;
        }
        catch (Exception exception)
        {
            IsValid = false;
            Value = new MediaAttachment[MediaAttachment.Settings.MAX_ALLOWEDFILES];
            ErrorMessage = exception.Message;
        }

    }


    void ResetValue()
    {
        IsValid = false;
        Value = new MediaAttachment[MediaAttachment.Settings.MAX_ALLOWEDFILES];
    }
}
